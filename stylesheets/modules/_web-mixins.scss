/* mixins */



@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	border-radius: $radius;
	background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}

// Single side border-radius

@mixin border-top-radius($radius) {
  -webkit-border-top-right-radius: $radius;
  border-top-right-radius: $radius;
   -webkit-border-top-left-radius: $radius;
   border-top-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-right-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
     -webkit-border-top-right-radius: $radius;
     border-top-right-radius: $radius;
     background-clip: padding-box;
}
@mixin border-bottom-radius($radius) {
  -webkit-border-bottom-right-radius: $radius;
  border-bottom-right-radius: $radius;
   -webkit-border-bottom-left-radius: $radius;
   border-bottom-left-radius: $radius;
   background-clip: padding-box;
}
@mixin border-left-radius($radius) {
  -webkit-border-bottom-left-radius: $radius;
  border-bottom-left-radius: $radius;
     -webkit-border-top-left-radius: $radius;
     border-top-left-radius: $radius;
     background-clip: padding-box;
}






@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
	top: $top;
	right: $right;
	bottom: $bottom;
	left: $left;
	position: absolute;
}





@mixin bp($point) {
	@if $point == $bp-screen {
		@media #{$bp-screen} { @content; }
	}
	@else if $point == $bp-tablet {
		@media #{$bp-tablet} { @content; }
	}
	@else if $point == $bp-phone {
		@media #{$bp-phone} { @content; }
	}
}


@mixin breakpoint($point) {
  @if $point == screen {
    @media (min-width: 992px) { @content; }
  }
  @else if $point == tablet {
    @media (min-width: 768px) { @content; }
  }
  @else if $point == phone {
    @media (min-width: 480px)  { @content; }
  }
}

/*
@mixin breakpoint($point) {
  @if $point == screen {
    @media (min-width: 58em) { @content; }
  }
  @else if $point == tablet {
    @media (min-width: 46em) { @content; }
  }
  @else if $point == phone {
    @media (min-width: 37.5em)  { @content; }
  }
}
*/
/* usage
.page-wrap {
  width: 75%;
  @include breakpoint(screen) { width: 60%; }
  @include bp($bp-tablet) { width: 80%; }
  @include breakpoint(phone) { width: 95%; }
}
*/


// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/css3/_placeholder.scss
@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}




// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_clearfix.scss
@mixin clearfix {
  &:after {
    content:"";
    display:table;
    clear:both;
  }
}

// https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_hide-text.scss

@mixin hide-text {
  overflow: hidden;

  &:before {
    content: "";
    display: block;
    width: 0;
    height: 100%;
  }
}